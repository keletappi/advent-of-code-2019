/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package day8

fun main() {
    part1()
    part2()
}

private fun part1() {
    Image(25, 6, input.toCharArray().map { "$it".toInt() })
            .layers
            .minBy { it.countOf(0) }!!
            .run { countOf(1) * countOf(2) }
            .let { println("part 1: $it") }
}

private fun part2() {
    val image = Image(25, 6, input.toCharArray().map { "$it".toInt() })
    for (y in 0 until 6) {
        for (x in 0 until 25) {
            print(if (image.pixel(x, y) == 1) "*" else " ")
        }
        println()
    }
}

class Image(private val w: Int, private val h: Int, private val data: List<Int>) {

    class Layer(private val w: Int, private val h: Int, private val data: List<Int>) {
        fun countOf(i: Int): Int = data.filter { it == i }.size
        override fun toString(): String {
            return "Layer(h=$h, w=$w, data=$data)"
        }

        fun pixel(x: Int, y: Int): Int = data[h * y + x]
    }

    val layers: List<Layer> by lazy {
        val list = mutableListOf<Layer>()
        for (i in data.indices step h * w) list.add(Layer(h, w, data.slice(i until i + (h * w))))
        list
    }

    override fun toString(): String {
        return "Image(h=$h, w=$w, data=$data)"
    }

    fun pixel(x: Int, y: Int): Int = layers.first { it.pixel(x, y) != 2 }.pixel(x, y)

}

