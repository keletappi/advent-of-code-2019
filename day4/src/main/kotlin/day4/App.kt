/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package day4

fun main() {

    testIncrementing(123456)
    testIncrementing(123456)
    testIncrementing(244789)

    testAtMostTwo(244789)
    testAtMostTwo(447889)
    testAtMostTwo(447779)
    testAtMostTwo(347779)

    val part1 = (236491..713787)
            .filter { it.digitCount == 6 }
            .filter { it.hasAdjancedDigits() }
            .filter { it.digitsAreIncrementing() }
    println(part1.size)

    val part2 = (236491..713787)
            .filter { it.digitCount == 6 }
            .filter { it.hasAdjancedDigits() }
            .filter { it.digitsAreIncrementing() }
            .filter { it.hasExactlyMostTwoAdjanced() }
            .apply { println(joinToString(separator = ",")) }
    println(part2.size)
}

fun testAtMostTwo(n: Int) {
    println("$n at precis two adj? ${n.hasExactlyMostTwoAdjanced()}")
}

private fun testIncrementing(n: Int) {
    println("$n incrementing? ${n.digitsAreIncrementing()}")
}

private fun Int.hasAdjancedDigits(): Boolean {
    val str = this.toString(10).toCharArray()
    for (i in 0 until (str.size - 1)) {
        if (str[i] == str[i + 1]) return true
    }
    return false
}

private fun Int.hasExactlyMostTwoAdjanced(): Boolean {
    val str = this.toString(10).toCharArray()
    var n = 1
    for (i in 0 until (str.size - 1)) {
        if (n > 1) {
            n--
            continue
        }
        for (j in i + 1 until str.size) {
            if (str[i] == str[j])
                n++
            else
                break
        }
        if (n == 2) return true
    }
    return false
}

private val Int.digitCount
    get() = toString(10).length

private fun Int.digitsAreIncrementing(): Boolean {
    return toString(10).toCharArray()
            .map { it.toInt() }
            .reduce { acc, c -> if (acc != -1 && acc <= c) c else -1 } >= 0

}
