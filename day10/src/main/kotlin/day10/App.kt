/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package day10

import kotlin.math.max
import kotlin.math.sign

fun main() {
    checkMap(AsteroidMap(PART1_TEST_SIMPLE_8_AT_3_4))
    checkMap(AsteroidMap(PART1_TEST_EXPECTING_210_AT_11_13))
    checkMap(AsteroidMap(PART1_INPUT))
}

data class Res(val x: Int, val y: Int, val n: Int) {
    override fun toString(): String {
        return "Res(x=$x, y=$y, n=$n)"
    }
}

private fun checkMap(map: AsteroidMap) {
    val results: MutableList<Res> = mutableListOf()
    for (y in 0 until map.h) {
        for (x in 0 until map.w) {
            if (map.isAsteroid(x, y)) {
                results.add(Res(x, y, map.numVisibleAsteroids(x, y)))
            }
        }
    }

    /*
    results.forEach {
        println("$it")
    }
     */
    results.maxBy { it.n }.run { println("$this") }

}


class AsteroidMap(input: String) {

    private val rows: List<String> by lazy {
        input.split('\n')
    }

    val w by lazy { rows[0].length }
    val h by lazy { rows.size }

    fun isAsteroid(x: Int, y: Int) = rows[y][x] == '#'
    fun onMap(x: Int, y: Int) = x in 0 until w && y in 0 until h

    fun numVisibleAsteroids(x: Int, y: Int): Int {

        val validXIncrements = 1 until w - x
        val validYIncrements = 1 until h - y
        val validXDecrements = 1 until x + 1
        val validYDecrements = 1 until y + 1
        val validMoves: MutableList<Pair<Int, Int>> = mutableListOf()

        validXIncrements.forEach { itX -> validYIncrements.forEach { itY -> validMoves.add(itX to itY) } }
        validXIncrements.forEach { itX -> validYDecrements.forEach { itY -> validMoves.add(itX to -itY) } }
        validXDecrements.forEach { itX -> validYIncrements.forEach { itY -> validMoves.add(-itX to itY) } }
        validXDecrements.forEach { itX -> validYDecrements.forEach { itY -> validMoves.add(-itX to -itY) } }

        validMoves.add(1 to 0)
        validMoves.add(-1 to 0)
        validMoves.add(0 to 1)
        validMoves.add(0 to -1)

        val visibleAsteroids: MutableSet<Pair<Int, Int>> = mutableSetOf()
        val triedMoves: MutableList<Pair<Int, Int>> = mutableListOf()
        validMoves.forEach { move ->

            if (triedMoves.find
                    { tried ->
                        val sameSignX = tried.first.sign == move.first.sign
                        val sameSignY = tried.second.sign == move.second.sign

                        if (!sameSignX) return@find false
                        if (!sameSignY) return@find false

                        for (i in 2 until max(w, h)) {
                            if (tried.first * i == move.first && tried.second * i == move.second) {
                                return@find true
                            }

                        }
                        return@find false
                    } != null) {
                return@forEach
            }

            triedMoves.add(move)
            var x_ = x + move.first
            var y_ = y + move.second

            while (onMap(x_, y_)) {
                if (isAsteroid(x_, y_)) {
                    visibleAsteroids.add(x_ to y_)
                    return@forEach
                }
                x_ += move.first
                y_ += move.second
            }
        }
        return visibleAsteroids.size
    }

}
