/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package day7

import intcode.IntcodeComputer
import intcode.permute
import java.util.concurrent.LinkedBlockingDeque
import java.util.function.Consumer
import java.util.function.Supplier

val AMPLIFIER_SOURCE = arrayOf(3, 8, 1001, 8, 10, 8, 105, 1, 0, 0, 21, 42, 67, 88, 101, 114, 195, 276, 357, 438, 99999, 3, 9, 101, 3, 9, 9, 1002, 9, 4, 9, 1001, 9, 5, 9, 102, 4, 9, 9, 4, 9, 99, 3, 9, 1001, 9, 3, 9, 1002, 9, 2, 9, 101, 2, 9, 9, 102, 2, 9, 9, 1001, 9, 5, 9, 4, 9, 99, 3, 9, 102, 4, 9, 9, 1001, 9, 3, 9, 102, 4, 9, 9, 101, 4, 9, 9, 4, 9, 99, 3, 9, 101, 2, 9, 9, 1002, 9, 3, 9, 4, 9, 99, 3, 9, 101, 4, 9, 9, 1002, 9, 5, 9, 4, 9, 99, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 99, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 99, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 99, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 99, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 99)

fun main() {
    // part 1:
    findAmplifierConfiguration(AMPLIFIER_SOURCE, listOf(0, 1, 2, 3, 4), "Day7 / part1")

    // part 2:
    findAmplifierConfiguration(AMPLIFIER_SOURCE, listOf(5, 6, 7, 8, 9), "Day7 / part2")
}

fun findAmplifierConfiguration(amplifierSource: Array<Int>,
                               phaseConfigValues: List<Int>,
                               label: String = " ") {

    val results: MutableMap<Int, AmpArrayConfiguration> = mutableMapOf()

    val initialPhaseConfigs: List<AmpArrayConfiguration> = phaseConfigValues.permute().map {
        AmpArrayConfiguration(it[0], it[1], it[2], it[3], it[4])
    }

    for (config in initialPhaseConfigs) {

        val connectAtoB = AmplifierConnection("A->B")
        val connectBtoC = AmplifierConnection("B->C")
        val connectCtoD = AmplifierConnection("C->D")
        val connectDtoE = AmplifierConnection("D->E")
        val connectEtoA = AmplifierConnection("E->A")

        connectEtoA.accept(config.a)
        connectEtoA.accept(0)

        connectAtoB.accept(config.b)
        connectBtoC.accept(config.c)
        connectCtoD.accept(config.d)
        connectDtoE.accept(config.e)

        var eOutput: Int? = null

        val a = Thread {
            IntcodeComputer(name = "AMP_A",
                    source = amplifierSource,
                    input = connectEtoA::get,
                    output = connectAtoB::accept)
                    .execute()
        }

        val b = Thread {
            IntcodeComputer("AMP_B",
                    source = amplifierSource,
                    input = connectAtoB::get,
                    output = connectBtoC::accept
            ).execute()
        }

        val c = Thread({
            IntcodeComputer("AMP_C",
                    source = amplifierSource,
                    input = connectBtoC::get,
                    output = connectCtoD::accept
            ).execute()
        }, "AMP_C")

        val d = Thread {
            IntcodeComputer("AMP_D",
                    source = amplifierSource,
                    input = connectCtoD::get,
                    output = connectDtoE::accept
            ).execute()
        }

        val e = Thread {
            IntcodeComputer("AMP_E",
                    source = amplifierSource,
                    input = connectDtoE::get,
                    output = {
                        connectEtoA.accept(it)
                        eOutput = it;
                    }
            ).execute()
        }

        a.start()
        b.start()
        c.start()
        d.start()
        e.start()

        e.join()

        results[eOutput!!] = config
    }

    val maxValue = results.keys.max()
    println("$label :: Amp maximizing configuration: ${results[maxValue]} -> $maxValue")
}

class AmplifierConnection(val name: String = "") : Supplier<Int>, Consumer<Int> {
    private val values: LinkedBlockingDeque<Int> = LinkedBlockingDeque()
    override fun get(): Int = values.take()
    override fun accept(t: Int) {
        values.add(t)
    }
}

data class AmpArrayConfiguration(val a: Int, val b: Int, val c: Int, val d: Int, val e: Int) {
    override fun toString(): String {
        return "AmpArrayConfiguration(a=$a, b=$b, c=$c, d=$d, e=$e)"
    }
}

