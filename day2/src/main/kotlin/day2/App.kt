/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package day2

import java.lang.RuntimeException

val source = arrayOf(
        1, 0, 0, 3,
        1, 1, 2, 3,
        1, 3, 4, 3,
        1, 5, 0, 3,
        2, 1, 13, 19,
        1, 9, 19, 23,
        1, 6, 23, 27,
        2, 27, 9, 31,
        2, 6, 31, 35,
        1, 5, 35, 39,
        1, 10, 39, 43,
        1, 43, 13, 47,
        1, 47, 9, 51,
        1, 51, 9, 55,
        1, 55, 9, 59,
        2, 9, 59, 63,
        2, 9, 63, 67,
        1, 5, 67, 71,
        2, 13, 71, 75,
        1, 6, 75, 79,
        1, 10, 79, 83,
        2, 6, 83, 87,
        1, 87, 5, 91,
        1, 91, 9, 95,
        1, 95, 10, 99,
        2, 9, 99, 103,
        1, 5, 103, 107,
        1, 5, 107, 111,
        2, 111, 10, 115,
        1, 6, 115, 119,
        2, 10, 119, 123,
        1, 6, 123, 127,
        1, 127, 5, 131,
        2, 9, 131, 135,
        1, 5, 135, 139,
        1, 139, 10, 143,
        1, 143, 2, 147,
        1, 147, 5, 0,
        99,
        2, 0, 14, 0)

fun main(args: Array<String>) {
    part1()
    part2()
}

fun part1() {
    val result = runProgram(12, 2)
    println("Part1: $result" )
}

fun part2() {
    var nouns = 0.rangeTo(100)
    var verbs = 0.rangeTo(100)

    nouns.forEach { noun ->
        verbs.forEach { verb ->
            val result = runProgram(noun, verb)
            if (result == 19690720) {
                println("Part2: noun=$noun verb=$verb -> $result ::: ${100 * noun + verb}")
            }
        }
    }
}

fun runProgram(noun: Int, verb: Int): Int {
    val program = source.clone()
    program[1] = noun
    program[2] = verb
    return eval(program, 0)
}

fun eval(memory: Array<Int>, c: Int): Int {
    return when (memory[c]) {
        1 -> {
            memory[memory[c + 3]] = memory[memory[c + 2]] + memory[memory[c + 1]]
            eval(memory, c + 4)
        }
        2 -> {
            memory[memory[c + 3]] = memory[memory[c + 2]] * memory[memory[c + 1]]
            eval(memory, c + 4)
        }
        99 -> memory[0]
        else -> throw RuntimeException("Bad opcode ${memory[c]} at $c")
    }
}